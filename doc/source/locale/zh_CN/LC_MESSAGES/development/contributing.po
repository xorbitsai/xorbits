# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2023, Xprobe Inc.
# This file is distributed under the same license as the Xorbits package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Xorbits \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-08 13:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/development/contributing.rst:5
msgid "Contributing to Xorbits"
msgstr "参与 Xorbits 项目"

#: ../../source/development/contributing.rst:8
msgid "Table of contents:"
msgstr "目录"

#: ../../source/development/contributing.rst:11
msgid "Where to start?"
msgstr "如何开始"

#: ../../source/development/contributing.rst:13
msgid ""
"All contributions, bug reports, bug fixes, documentation improvements, "
"enhancements, and ideas are welcome."
msgstr "我们欢迎你以任何形式参与 Xorbits，包括报告 bug，修复 bug，文档优化，功能增强，或是贡献新的想法。"

#: ../../source/development/contributing.rst:16
msgid ""
"If you are brand new to Xorbits or open-source development, we recommend "
"going through the `GitHub \"issues\" tab <https://github.com/xprobe-"
"inc/xorbits/issues>`_ to find issues that interest you. There are a "
"number of issues listed under `Docs <https://github.com/xprobe-"
"inc/xorbits/issues?labels=documentation&sort=updated&state=open>`_ and "
"`good first issue <https://github.com/xprobe-"
"inc/xorbits/issues?labels=good+first+issue&sort=updated&state=open>`_ "
"where you could start out. Once you've found an interesting issue, you "
"can return here to get your development environment setup."
msgstr "如果你对 Xorbits 不熟悉，或是第一次接触开源开发，我们建议从 `GitHub issues 页面"
" <https://github.com/xprobe-inc/xorbits/issues>`_ 下寻找你感兴趣的 issue。"
"从 `文档 <https://github.com/xprobe-"
"inc/xorbits/issues?labels=documentation&sort=updated&state=open>`_ 或 "
"`good first issue <https://github.com/xprobe-"
"inc/xorbits/issues?labels=good+first+issue&sort=updated&state=open>`_ 开始是不错的选择。当你找到感兴趣的 issue 后，可以回到本文档来设置你的开发环境。"

#: ../../source/development/contributing.rst:25
msgid ""
"When you start working on an issue, it's a good idea to assign the issue "
"to yourself, so nobody else duplicates the work on it. GitHub restricts "
"assigning issues to maintainers of the project only. In most projects, "
"and until recently in Xorbits, contributors added a comment letting "
"others know they are working on an issue. While this is ok, you need to "
"check each issue individually, and it's not possible to find the "
"unassigned ones."
msgstr ""
"当你开始解决一个 issue 时，请先将 issue 分配给自己，避免其他人重复你的工作。"

#: ../../source/development/contributing.rst:31
msgid ""
"For this reason, we implemented a workaround consisting of adding a "
"comment with the exact text ``take``. When you do it, a GitHub action "
"will automatically assign you the issue (this will take seconds, and may "
"require refreshing the page to see it). By doing this, it's possible to "
"filter the list of issues and find only the unassigned ones."
msgstr ""
"你可以在 issue 下回复 ``take``，此时 GitHub 将自动把这个 issue 分配给你（这可能需要几秒钟，并且需要刷新页面）。这样，我们便可以过滤出未被分配的 issue。"

#: ../../source/development/contributing.rst:36
#, python-format
msgid ""
"So, a good way to find an issue to start contributing to Xorbits is to "
"check the list of `unassigned good first issues <https://github.com"
"/xprobe-"
"inc/xorbits/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+no%3Aassignee>`_"
" and assign yourself one you like by writing a comment with the exact "
"text ``take``."
msgstr ""
"综上，找到一个适合你的 issue 的最好途径是查看"
" `尚未分配的 good first issues <https://github.com"
"/xprobe-"
"inc/xorbits/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+no%3Aassignee>`_ "
"，并回复 ``take`` 将这个 issue 分配给自己。"


#: ../../source/development/contributing.rst:40
msgid ""
"If for whatever reason you are not able to continue working with the "
"issue, please try to unassign it, so other people know it's available "
"again. You can check the list of assigned issues, since people may not be"
" working in them anymore. If you want to work on one that is assigned, "
"feel free to kindly ask the current assignee if you can take it (please "
"allow at least a week of inactivity before considering work in the issue "
"discontinued)."
msgstr ""
"如果因为某些原因，你无法继续解决这个问题，请取消分配。你也可以查看已被分配的 issue 列表。如果你想解决已被分配的问题，请礼貌地询问当前在处理该 issue 的人是否可以接手（请在考虑接手前至少等待一周时间）。"

#: ../../source/development/contributing.rst:46
msgid ""
"We have several `contributor community <https://xorbits.io/community>`_ "
"communication channels, which you are welcome to join, and ask questions "
"as you figure things out. Among them are regular meetings for new "
"contributors, dev meetings, a discourse forum, and a slack for the "
"contributor community. All Xorbits contributors are welcome to these "
"spaces, where they can connect with each other. Even maintainers who have"
" been with us for a long time felt just like you when they started out, "
"and are happy to welcome you and support you as you get to know how we "
"work, and where things are. Take a look at the next sections to learn "
"more."
msgstr ""
"欢迎加入我们的社区交流群，讨论 Xorbits 的相关问题。我们有 slack 群与微信群等方式，以帮助 Xorbits 的开发者相互取得联系。即使是熟练的开发者，在刚开始的时候也和您一样对 Xorbits 感到陌生和好奇。他们很乐意欢迎你并帮助你了解 Xorbits。请查看下一节以了解更多信息。"

#: ../../source/development/contributing.rst:57
msgid "Bug reports and enhancement requests"
msgstr "报告 bug 与提出功能诉求"

#: ../../source/development/contributing.rst:59
msgid ""
"Bug reports are an important part of making Xorbits more stable. Having a"
" complete bug report will allow others to reproduce the bug and provide "
"insight into fixing. See `this stackoverflow article "
"<https://stackoverflow.com/help/mcve>`_ and `this blogpost "
"<https://matthewrocklin.com/minimal-bug-reports>`_ for tips on writing a "
"good bug report."
msgstr ""
"Bug 报告是让 Xorbits 更加稳定的重要方式。一份完整的 bug 报告能够让维护者复现你遇到的 bug 并提出修复建议。"
"关于撰写 Bug 报告，请参考这篇 `stackoverflow 文章 <https://stackoverflow.com/help/mcve>`_ 与这篇 `博客 <https://matthewrocklin.com/minimal-bug-reports>`_ 。"

#: ../../source/development/contributing.rst:65
msgid ""
"Trying the bug-producing code out on the *main* branch is often a "
"worthwhile exercise to confirm the bug still exists. It is also worth "
"searching existing bug reports and pull requests to see if the issue has "
"already been reported and/or fixed."
msgstr ""
"报告 bug 前，我们建议在 *主干 (main) 分支* 尝试运行 bug 复现代码，以确认 bug 仍存在。此外，也建议先查看现有的 bug 报告和 pull request，看看该问题是否已经被报告或修复了。"

#: ../../source/development/contributing.rst:69
msgid "Bug reports must:"
msgstr "Bug 报告需要:"

#: ../../source/development/contributing.rst:71
msgid ""
"Include a short, self-contained Python snippet reproducing the problem. "
"You can format the code nicely by using `GitHub Flavored Markdown "
"<https://github.github.com/github-flavored-markdown/>`_::"
msgstr ""
"包含一段简短，自洽的 Python 代码片段，以便重现问题::"

#: ../../source/development/contributing.rst:81
msgid "Include the full version string of Xorbits and its dependencies."
msgstr ""
"包含 Xorbits 的完整版本及相关依赖的版本。"

#: ../../source/development/contributing.rst:83
msgid ""
"Explain why the current behavior is wrong/not desired and what you expect"
" instead."
msgstr ""
"解释为什么当前的行为不正确，以及预期的行为是什么。"

#: ../../source/development/contributing.rst:85
msgid ""
"The issue will then show up to the Xorbits community and be open to "
"comments/ideas from others."
msgstr ""
"提交 bug 报告后，该 issue 将会稍后显示在 Xorbits 社区中，并允许其他开发者进行回复。"

#: ../../source/development/contributing.rst:90
msgid "Working with the code"
msgstr "代码开发"

#: ../../source/development/contributing.rst:92
msgid ""
"Now that you have an issue you want to fix, enhancement to add, or "
"documentation to improve, you need to learn how to work with GitHub and "
"the Xorbits code base."
msgstr ""
"当你有一个需要修复的问题、需要添加的增强功能或需要改进的文档时，你需要学习如何使用 GitHub 并了解 Xorbits 代码库。"

#: ../../source/development/contributing.rst:98
msgid "Version control, Git, and GitHub"
msgstr "版本控制，Git，以及 GitHub"

#: ../../source/development/contributing.rst:100
msgid ""
"To the new user, working with Git is one of the more daunting aspects of "
"contributing to Xorbits. It can very quickly become overwhelming, but "
"sticking to the guidelines below will help keep the process "
"straightforward and mostly trouble free.  As always, if you are having "
"difficulties please feel free to ask for help."
msgstr ""
"对新用户来说,使用 Git 是参与 Xorbits 开发最令人畏惧的方面之一。开发工作可能因为 Git 变得混乱不堪。"
"以下指南会帮助你把 Git 变得简单直接且基本上不出错。如果您遇到难以解决的问题，欢迎在社区寻求帮助。"

#: ../../source/development/contributing.rst:105
msgid ""
"The code is hosted on `GitHub <https://www.github.com/xprobe-"
"inc/xorbits>`_. To contribute you will need to sign up for a `free GitHub"
" account <https://github.com/signup/free>`_. We use `Git <https://git-"
"scm.com/>`_ for version control to allow many people to work together on "
"the project."
msgstr ""
"Xorbits 的代码托管在 `GitHub <https://www.github.com/xprobe-inc/xorbits>`_ 。"
"为了参与 Xorbits，你需要注册一个 `免费 GitHub 账户 <https://github.com/signup/free>`_ 。"
"我们使用 `Git <https://git-scm.com/>`_ 进行版本控制，这样大家可以共同参与项目的开发。"

#: ../../source/development/contributing.rst:110
msgid "Some great resources for learning Git:"
msgstr "以下是一些很好的学习 Git 的资源:"

#: ../../source/development/contributing.rst:112
msgid "the `GitHub help pages <https://help.github.com/>`_."
msgstr "`GitHub 帮助页面 <https://help.github.com/>`_ 。"

#: ../../source/development/contributing.rst:113
msgid "the `NumPy documentation <https://numpy.org/doc/stable/dev/index.html>`_."
msgstr "`NumPy 开发流程 <https://www.numpy.org.cn/dev/development_workflow.html>`_ 。"

#: ../../source/development/contributing.rst:114
msgid "Matthew Brett's `Pydagogue <https://matthew-brett.github.io/pydagogue/>`_."
msgstr "Matthew Brett 的 `Pydagogue <https://matthew-brett.github.io/pydagogue/>`_ 。"

#: ../../source/development/contributing.rst:117
msgid "Getting started with Git"
msgstr "开始使用 Git"

#: ../../source/development/contributing.rst:119
msgid ""
"`GitHub has instructions <https://help.github.com/set-up-git-redirect>`__"
" for installing git, setting up your SSH key, and configuring git. All "
"these steps need to be completed before you can work seamlessly between "
"your local repository and GitHub."
msgstr "你可以参考 `GitHub 指南 <https://help.github.com/set-up-git-redirect>`_ 来安装 git，设置 SSH key，并配置 git。"
"你需要完成这些步骤以确保你的本地仓库和 GitHub 可以正常工作，后续的工作才可以顺利进行。"

#: ../../source/development/contributing.rst:126
msgid "Forking"
msgstr "创建分叉 (forking)"

#: ../../source/development/contributing.rst:128
msgid ""
"You will need your own fork to work on the code. Go to the `Xorbits "
"project page <https://github.com/xprobe-inc/xorbits>`_ and hit the "
"``Fork`` button. You will want to clone your fork to your machine::"
msgstr ""
"在开发之前，你需要创建自己的 fork。访问 `Xorbits 项目页面 <https://github.com/xprobe-inc/xorbits>`_ 并点击右上角 ``Fork`` 按钮。之后克隆你的 fork 到本地::"

#: ../../source/development/contributing.rst:136
msgid ""
"This creates the directory ``xorbits-yourname`` and connects your "
"repository to the upstream (main project) *Xorbits* repository."
msgstr "上面的代码会创建一个名为 ``xorbits-yourname`` 的本地仓库，并将该本地仓库与 *Xorbits 主仓* 关联。"

#: ../../source/development/contributing.rst:139
msgid ""
"Note that performing a shallow clone (with ``--depth==N``, for some ``N``"
" greater or equal to 1) might break some tests."
msgstr "需要注意的是，进行浅克隆 (带有选项 ``--depth==N``, ``N`` 大于等于 1) 可能会导致某些测试失败。"

#: ../../source/development/contributing.rst:143
msgid "Creating a branch"
msgstr "创建分支(branch)"

#: ../../source/development/contributing.rst:145
msgid ""
"You want your main branch to reflect only production-ready code, so "
"create a feature branch for making your changes. For example::"
msgstr "你的主干 (main) 分支通常应该是能够用于正式生产的，因此在进行代码修改前，你需要创建新的功能 (feature) 分支。举例来说::"

#: ../../source/development/contributing.rst:151
msgid "The above can be simplified to::"
msgstr "上面的代码可以简化为::"

#: ../../source/development/contributing.rst:155
msgid ""
"This changes your working directory to the shiny-new-feature branch. Keep"
" any changes in this branch specific to one bug or feature so it is clear"
" what the branch brings to Xorbits. You can have many shiny-new-features "
"and switch in between them using the git checkout command."
msgstr "这会将你的当前分支切换为 ``shiny-new-feature``。在这个分支下的改动应该限制在一个 bug 或功能的范围内，这样这个分支上的改动对 Xorbits 的影响将会非常清晰。你可以有多个功能分支，并使用 ``git checkout`` 命令在这些分支之间来回切换。"

#: ../../source/development/contributing.rst:160
msgid ""
"When creating this branch, make sure your main branch is up to date with "
"the latest upstream main version. To update your local main branch, you "
"can do::"
msgstr "从主干分支创建分支前，请确保你的主干分支是最新的。你可以用下面的命令更新主干分支::"

#: ../../source/development/contributing.rst:167
msgid ""
"When you want to update the feature branch with changes in main after you"
" created the branch, check the section on :ref:`updating a PR "
"<contributing.update-pr>`."
msgstr ""
"当你想添加主干分支的改动到你的功能分支时，请见 :ref:`更新你的 pull request <contributing.update-pr>` 。"

#: ../../source/development/contributing.rst:172
msgid "Contributing your changes to Xorbits"
msgstr "将改动贡献到 Xorbits"

#: ../../source/development/contributing.rst:177
msgid "Committing your code"
msgstr "提交你的代码"

#: ../../source/development/contributing.rst:179
msgid ""
"Keep style fixes to a separate commit to make your pull request more "
"readable."
msgstr "请保持每次 commit 的代码风格一致，以便使你的 pull request 更具有可读性。"

#: ../../source/development/contributing.rst:181
msgid "Once you've made changes, you can see them by typing::"
msgstr "每当你对代码做出更改后，你可以通过输入如下指令来查看::"

#: ../../source/development/contributing.rst:185
msgid ""
"If you have created a new file, it is not being tracked by git. Add it by"
" typing::"
msgstr "新创建的文件不会被 git 追踪，通过以下指令将其加入代码仓库::"

#: ../../source/development/contributing.rst:189
msgid "Doing 'git status' again should give something like::"
msgstr "再次输入 'git status' 指令应出现::"

#: ../../source/development/contributing.rst:196
msgid ""
"Finally, commit your changes to your local repository with an explanatory"
" message. Xorbits uses a convention for commit message prefixes and "
"layout.  Here are some common prefixes along with general guidelines for "
"when to use them:"
msgstr "最后，将你的更改和更改的解释说明commit到本地的repository当中。"
"Xorbits 使用一种关于commit message前缀和布局的约定。以下是一些常见的前缀以及何时使用它们的一般指南："

#: ../../source/development/contributing.rst:200
msgid "FEATURE: Feature, new functionality"
msgstr "FEATURE: 特性与新功能"

#: ../../source/development/contributing.rst:201
msgid "ENH: Enhancement"
msgstr "ENH: 改进与提升"

#: ../../source/development/contributing.rst:202
msgid "BUG: Bug fix"
msgstr "BUG: Bug 修复"

#: ../../source/development/contributing.rst:203
msgid "DOC: Additions/updates to documentation"
msgstr "DOC: 文档的删改与添加"

#: ../../source/development/contributing.rst:204
msgid "TST: Additions/updates to tests"
msgstr "TST: 测试的删改与添加"

#: ../../source/development/contributing.rst:205
msgid "BLD: Updates to the build process/scripts"
msgstr "BLD: 构建过程或脚本的更新"

#: ../../source/development/contributing.rst:206
msgid "PERF: Performance improvement"
msgstr "PERF: 性能提升"

#: ../../source/development/contributing.rst:207
msgid "TYP: Type annotations"
msgstr "TYP: 类型注解"

#: ../../source/development/contributing.rst:208
msgid "CLN: Code cleanup"
msgstr "CLN: 代码清理"

#: ../../source/development/contributing.rst:209
msgid "REF: Refactor"
msgstr "REF: 重构"

#: ../../source/development/contributing.rst:210
msgid "CHORE: chore"
msgstr "CHORE: 辅助任务"

#: ../../source/development/contributing.rst:212
msgid ""
"The following defines how a commit message should be structured.  Please "
"reference the relevant GitHub issues in your commit message using GH1234 "
"or #1234.  Either style is fine, but the former is generally preferred:"
msgstr "以下定义了 commit message 的结构应如何来书写。"
"在 commit message 中，请用 GH1234 或 #1234 的格式关联与你的更改内容对应的 GitHub issues。"
"两种格式均可，但推荐使用前者:"

#: ../../source/development/contributing.rst:216
msgid "a subject line with ``< 80`` chars."
msgstr "小于 80 个字符的主题描述"

#: ../../source/development/contributing.rst:217
msgid "One blank line."
msgstr "空一行"

#: ../../source/development/contributing.rst:218
msgid "Optionally, a commit message body."
msgstr "commit message 主体 (可为空)"

#: ../../source/development/contributing.rst:220
msgid "Now you can commit your changes in your local repository::"
msgstr "现在你可以将你的更改 commit 到本地的代码仓库::"

#: ../../source/development/contributing.rst:227
msgid "Pushing your changes"
msgstr "提交你的更改"

#: ../../source/development/contributing.rst:229
msgid ""
"When you want your changes to appear publicly on your GitHub page, push "
"your forked feature branch's commits::"
msgstr "当你想在你的 GitHub 页面上公开你的更改时，将你在 fork 的对应功能分支上所做的修改提交::"

#: ../../source/development/contributing.rst:234
msgid ""
"Here ``origin`` is the default name given to your remote repository on "
"GitHub. You can see the remote repositories::"
msgstr "这里的 ``origin`` 是你 GitHub 上的远程代码仓库的默认命名，"
"你可以通过如下指令查看所有远程代码仓库::"

#: ../../source/development/contributing.rst:239
msgid ""
"If you added the upstream repository as described above you will see "
"something like::"
msgstr "如果你按照前面的指令正确添加了上游仓库，你应该能看到类似于以下的信息::"

#: ../../source/development/contributing.rst:247
msgid ""
"Now your code is on GitHub, but it is not yet a part of the Xorbits "
"project. For that to happen, a pull request needs to be submitted on "
"GitHub."
msgstr "现在你的代码已经被上传至 GitHub，但它还不是 Xorbits 代码的一部分。"
"要想让你的代码真正合并到 Xorbits，你还需要创建一个 pull request。"

#: ../../source/development/contributing.rst:251
msgid "Review your code"
msgstr "检查你的代码"

#: ../../source/development/contributing.rst:253
msgid ""
"When you're ready to ask for a code review, file a pull request. Before "
"you do, once again make sure that you have followed all the guidelines "
"outlined in this document regarding code style, tests, performance tests,"
" and documentation. You should also double check your branch changes "
"against the branch it was based on:"
msgstr "当你已经准备好请 Xorbits 核心开发人员对你的代码审查时，提交一个 pull request。"
"请在提交前再次确认你的代码格式已符合所有要求，包括但不限于代码风格，测试，性能测试，文档等方面。"
"同时，也请检查对应分支更改前后的变化:"

#: ../../source/development/contributing.rst:258
msgid ""
"Navigate to your repository on GitHub -- https://github.com/your-user-"
"name/xorbits"
msgstr "跳转至你的GitHub 代码仓库 -- https://github.com/your-user-name/xorbits"

#: ../../source/development/contributing.rst:259
msgid "Click on ``Branches``"
msgstr "点击 ``Branches``"

#: ../../source/development/contributing.rst:260
msgid "Click on the ``Compare`` button for your feature branch"
msgstr "在你的功能分支上点击 ``Compare``"

#: ../../source/development/contributing.rst:261
msgid ""
"Select the ``base`` and ``compare`` branches, if necessary. This will be "
"``main`` and ``shiny-new-feature``, respectively."
msgstr "如有必要，请选择 ``base`` 和 ``compare`` 分支。他们将会依次是 ``main`` 和 ``shiny-new-feature``。"

#: ../../source/development/contributing.rst:265
msgid "Finally, make the pull request"
msgstr "最后，创建 pull request"

#: ../../source/development/contributing.rst:267
msgid ""
"If everything looks good, you are ready to make a pull request.  A pull "
"request is how code from a local repository becomes available to the "
"GitHub community and can be looked at and eventually merged into the main"
" version.  This pull request and its associated changes will eventually "
"be committed to the main branch and available in the next release.  To "
"submit a pull request:"
msgstr "若无异常，你就准备好提交pull request了。Pull request 是将本地仓库中的代码提供给 GitHub 社区并进行查看和最终合并到主要版本的方式。"
"这个pull request及其关联的更改最终将被提交到主分支，并在下一个版本中可用。要提交一个pull request，请按照以下步骤进行:"

#: ../../source/development/contributing.rst:273
msgid "Navigate to your repository on GitHub"
msgstr "跳转到你的 ``GitHub repository``"

#: ../../source/development/contributing.rst:274
msgid "Click on the ``Pull Request`` button"
msgstr "点击 ``Pull Request`` 按钮"

#: ../../source/development/contributing.rst:275
msgid ""
"You can then click on ``Commits`` and ``Files Changed`` to make sure "
"everything looks okay one last time"
msgstr "然后你可以点击 ``Commits`` 和 ``Files Changed`` 来最后确认你的更改"

#: ../../source/development/contributing.rst:277
msgid "Write a description of your changes in the ``Preview Discussion`` tab"
msgstr "在 ``Preview Discussion`` 中描述你的更改"

#: ../../source/development/contributing.rst:278
msgid "Click ``Send Pull Request``."
msgstr "点击 ``Send Pull Request``。"

#: ../../source/development/contributing.rst:280
msgid ""
"This request then goes to the repository maintainers, and they will "
"review the code."
msgstr "你的请求将会送达到核心开发人员端并被审查。"

#: ../../source/development/contributing.rst:286
msgid "Updating your pull request"
msgstr "更新你的 pull request"

#: ../../source/development/contributing.rst:288
msgid ""
"Based on the review you get on your pull request, you will probably need "
"to make some changes to the code. In that case, you can make them in your"
" branch, add a new commit to that branch, push it to GitHub, and the pull"
" request will be automatically updated.  Pushing them to GitHub again is "
"done by::"
msgstr "基于核心开发人员对你的代码的审查结果，你可能需要对其做一些改动。你可以在你的分支上进行进行修改，随后 commit 并将这些修改"
"提交至 GitHub 上。你的 pull request 会根据提交结果自动更新。用以下操作将你的更新提交至 GitHub::"

#: ../../source/development/contributing.rst:295
msgid ""
"This will automatically update your pull request with the latest code and"
" restart the :any:`Continuous Integration <contributing.ci>` tests."
msgstr "这会自动更新你的 pull request 至最新的代码版本并且重新执行 :any:`持续集成 <contributing.ci>` 测试。"

#: ../../source/development/contributing.rst:298
msgid ""
"Another reason you might need to update your pull request is to solve "
"conflicts with changes that have been merged into the main branch since "
"you opened your pull request."
msgstr "另外， 当与自你提交 pull request 以来已合并到主分支的更改产生的冲突时，你也需要对 pull request 进行更改。"

#: ../../source/development/contributing.rst:302
msgid "To do this, you need to \"merge upstream main\" in your branch::"
msgstr "你需要合并上游代码仓库的主干分支来解决上述问题::"

#: ../../source/development/contributing.rst:308
msgid ""
"If there are no conflicts (or they could be fixed automatically), a file "
"with a default commit message will open, and you can simply save and quit"
" this file."
msgstr "如果没有冲突，将会自动打开一份含有默认 commit message 的文件，然后你就可以保存并关闭这个文档。"

#: ../../source/development/contributing.rst:311
msgid ""
"If there are merge conflicts, you need to solve those conflicts. See for "
"example at https://help.github.com/articles/resolving-a-merge-conflict-"
"using-the-command-line/ for an explanation on how to do this. Once the "
"conflicts are merged and the files where the conflicts were solved are "
"added, you can run ``git commit`` to save those fixes."
msgstr "如果有合并冲突，则你需要解决这些冲突，请通过以下例子：https://help.github.com/articles/resolving-a-merge-conflict-"
"using-the-command-line/ 了解如何解决。当所有的冲突都被解决并合并后，执行 ``git commit`` 来保存这些更改。"

#: ../../source/development/contributing.rst:317
msgid ""
"If you have uncommitted changes at the moment you want to update the "
"branch with main, you will need to ``stash`` them prior to updating (see "
"the `stash docs <https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-"
"Cleaning>`__). This will effectively store your changes and they can be "
"reapplied after updating."
msgstr "如果你在要更新同步本地分支与主分支的代码之前有本地分支还有未提交的更改，你需要在更新之前将它们存储 (stash) 起来"
"(请参见文档 `stash docs <https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-"
"Cleaning>`__)。 这将有效地保存你的更改，并且在更新后可以重新应用它们。"

#: ../../source/development/contributing.rst:322
msgid ""
"After the feature branch has been update locally, you can now update your"
" pull request by pushing to the branch on GitHub::"
msgstr "在本地更新了功能分支之后，你可以通过将其推送到 GitHub 上的分支来更新你的 pull request"

#: ../../source/development/contributing.rst:328
msgid "Autofixing formatting errors"
msgstr "自动修正格式问题"

#: ../../source/development/contributing.rst:330
msgid ""
"We use several styling checks (e.g. ``black``, ``flake8``, ``isort``) "
"which are run after you make a pull request."
msgstr "Xorbits 项目使用多个样式检查工具（例如 ``black``、 ``flake8``、 ``isort``），这些工具会在你发起 pull request 后运行。"

#: ../../source/development/contributing.rst:333
msgid ""
"To automatically fix formatting errors on each commit you make, you can "
"set up pre-commit yourself. First, create a Python :ref:`environment "
"<contributing_environment>` and then set up :ref:`pre-commit "
"<contributing.pre-commit>`."
msgstr "你可以通过自己配置 pre-commit 工具来自动修正每一次 commit 中的格式错误。"
"首先，创建一个Python :ref:`环境 <contributing_environment>`，然后配置 :ref:`pre-commit "
"<contributing.pre-commit>` 。"

#: ../../source/development/contributing.rst:338
msgid "Delete your merged branch (optional)"
msgstr "(可选) 删除已合并的分支。"

#: ../../source/development/contributing.rst:340
msgid ""
"Once your feature branch is accepted into upstream, you'll probably want "
"to get rid of the branch. First, merge upstream main into your branch so "
"git knows it is safe to delete your branch::"
msgstr "当上游代码仓库接受并合并了你的功能分支后，你可以删掉这些功能分支。"
"首先，将上游主干分支合并到你的分支，让 git 了解可以安全的删除当前功能分支::"

#: ../../source/development/contributing.rst:348
msgid "Then you can do::"
msgstr "然后你可以执行::"

#: ../../source/development/contributing.rst:352
msgid ""
"Make sure you use a lower-case ``-d``, or else git won't warn you if your"
" feature branch has not actually been merged."
msgstr "确保你输入的是小写 ``-d`` ，否则若你的功能分支没有合并成功，git 将不会警告。"

#: ../../source/development/contributing.rst:355
msgid "The branch will still exist on GitHub, so to delete it there do::"
msgstr "当你执行完上述操作以后，这个分支还会存在在 GitHub 上，你可以通过以下指令进行删除::"

#: ../../source/development/contributing.rst:361
msgid "Tips for a successful pull request"
msgstr "如何创建一个成功的 pull request"

#: ../../source/development/contributing.rst:363
msgid ""
"If you have made it to the `Review your code`_ phase, one of the core "
"contributors may take a look. Please note however that a handful of "
"people are responsible for reviewing all of the contributions, which can "
"often lead to bottlenecks."
msgstr "如果您已经进入了 `检查你的代码`_ 阶段，核心贡献者之一可能会进行审查。"
"然而，少数核心开发者需要负责审查所有的贡献，这往往会导致我们的审查无法顾及所有的需求。"

#: ../../source/development/contributing.rst:367
msgid "To improve the chances of your pull request being reviewed, you should:"
msgstr "为了提高你的 pull request 被核心开发者查看的机会，你应该:"

#: ../../source/development/contributing.rst:369
msgid ""
"**Reference an open issue** for non-trivial changes to clarify the PR's "
"purpose"
msgstr "对于较为复杂的更改，可以 **引用一个尚未解决的 issue** 来明确 pull request 的目的。"

#: ../../source/development/contributing.rst:370
msgid ""
"**Ensure you have appropriate tests**. These should be the first part of "
"any PR"
msgstr "**恰当全面的测试** 是所有 pull request 提交的首要部分。"

#: ../../source/development/contributing.rst:371
msgid ""
"**Keep your pull requests as simple as possible**. Larger PRs take longer"
" to review"
msgstr "**pull request 应当越简洁越好** ，因为越长的 pull request 需要越久的审查时间。 "

#: ../../source/development/contributing.rst:372
msgid ""
"**Ensure that CI is in a green state**. Reviewers may not even look "
"otherwise"
msgstr "审查人可能不会审查不通过 **GitHub 持续集成测试** 的 pull request，所以请确保你的 pull request 提交时 **CI check** 为绿色"

#: ../../source/development/contributing.rst:373
msgid ""
"**Keep** `Updating your pull request`_, either by request or every few "
"days"
msgstr "**请持续** `更新你的 pull request`_ "


