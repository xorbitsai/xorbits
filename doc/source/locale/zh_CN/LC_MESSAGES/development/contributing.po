# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2023, Xprobe Inc.
# This file is distributed under the same license as the Xorbits package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Xorbits \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-08 13:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/development/contributing.rst:5
msgid "Contributing to Xorbits"
msgstr ""

#: ../../source/development/contributing.rst:8
msgid "Table of contents:"
msgstr ""

#: ../../source/development/contributing.rst:11
msgid "Where to start?"
msgstr ""

#: ../../source/development/contributing.rst:13
msgid ""
"All contributions, bug reports, bug fixes, documentation improvements, "
"enhancements, and ideas are welcome."
msgstr ""

#: ../../source/development/contributing.rst:16
msgid ""
"If you are brand new to Xorbits or open-source development, we recommend "
"going through the `GitHub \"issues\" tab <https://github.com/xprobe-"
"inc/xorbits/issues>`_ to find issues that interest you. There are a "
"number of issues listed under `Docs <https://github.com/xprobe-"
"inc/xorbits/issues?labels=documentation&sort=updated&state=open>`_ and "
"`good first issue <https://github.com/xprobe-"
"inc/xorbits/issues?labels=good+first+issue&sort=updated&state=open>`_ "
"where you could start out. Once you've found an interesting issue, you "
"can return here to get your development environment setup."
msgstr ""

#: ../../source/development/contributing.rst:25
msgid ""
"When you start working on an issue, it's a good idea to assign the issue "
"to yourself, so nobody else duplicates the work on it. GitHub restricts "
"assigning issues to maintainers of the project only. In most projects, "
"and until recently in Xorbits, contributors added a comment letting "
"others know they are working on an issue. While this is ok, you need to "
"check each issue individually, and it's not possible to find the "
"unassigned ones."
msgstr ""

#: ../../source/development/contributing.rst:31
msgid ""
"For this reason, we implemented a workaround consisting of adding a "
"comment with the exact text ``take``. When you do it, a GitHub action "
"will automatically assign you the issue (this will take seconds, and may "
"require refreshing the page to see it). By doing this, it's possible to "
"filter the list of issues and find only the unassigned ones."
msgstr ""

#: ../../source/development/contributing.rst:36
#, python-format
msgid ""
"So, a good way to find an issue to start contributing to Xorbits is to "
"check the list of `unassigned good first issues <https://github.com"
"/xprobe-"
"inc/xorbits/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+no%3Aassignee>`_"
" and assign yourself one you like by writing a comment with the exact "
"text ``take``."
msgstr ""

#: ../../source/development/contributing.rst:40
msgid ""
"If for whatever reason you are not able to continue working with the "
"issue, please try to unassign it, so other people know it's available "
"again. You can check the list of assigned issues, since people may not be"
" working in them anymore. If you want to work on one that is assigned, "
"feel free to kindly ask the current assignee if you can take it (please "
"allow at least a week of inactivity before considering work in the issue "
"discontinued)."
msgstr ""

#: ../../source/development/contributing.rst:46
msgid ""
"We have several `contributor community <https://xorbits.io/community>`_ "
"communication channels, which you are welcome to join, and ask questions "
"as you figure things out. Among them are regular meetings for new "
"contributors, dev meetings, a discourse forum, and a slack for the "
"contributor community. All Xorbits contributors are welcome to these "
"spaces, where they can connect with each other. Even maintainers who have"
" been with us for a long time felt just like you when they started out, "
"and are happy to welcome you and support you as you get to know how we "
"work, and where things are. Take a look at the next sections to learn "
"more."
msgstr ""

#: ../../source/development/contributing.rst:57
msgid "Bug reports and enhancement requests"
msgstr ""

#: ../../source/development/contributing.rst:59
msgid ""
"Bug reports are an important part of making Xorbits more stable. Having a"
" complete bug report will allow others to reproduce the bug and provide "
"insight into fixing. See `this stackoverflow article "
"<https://stackoverflow.com/help/mcve>`_ and `this blogpost "
"<https://matthewrocklin.com/minimal-bug-reports>`_ for tips on writing a "
"good bug report."
msgstr ""

#: ../../source/development/contributing.rst:65
msgid ""
"Trying the bug-producing code out on the *main* branch is often a "
"worthwhile exercise to confirm the bug still exists. It is also worth "
"searching existing bug reports and pull requests to see if the issue has "
"already been reported and/or fixed."
msgstr ""

#: ../../source/development/contributing.rst:69
msgid "Bug reports must:"
msgstr ""

#: ../../source/development/contributing.rst:71
msgid ""
"Include a short, self-contained Python snippet reproducing the problem. "
"You can format the code nicely by using `GitHub Flavored Markdown "
"<https://github.github.com/github-flavored-markdown/>`_::"
msgstr ""

#: ../../source/development/contributing.rst:81
msgid "Include the full version string of Xorbits and its dependencies."
msgstr ""

#: ../../source/development/contributing.rst:83
msgid ""
"Explain why the current behavior is wrong/not desired and what you expect"
" instead."
msgstr ""

#: ../../source/development/contributing.rst:85
msgid ""
"The issue will then show up to the Xorbits community and be open to "
"comments/ideas from others."
msgstr ""

#: ../../source/development/contributing.rst:90
msgid "Working with the code"
msgstr ""

#: ../../source/development/contributing.rst:92
msgid ""
"Now that you have an issue you want to fix, enhancement to add, or "
"documentation to improve, you need to learn how to work with GitHub and "
"the Xorbits code base."
msgstr ""

#: ../../source/development/contributing.rst:98
msgid "Version control, Git, and GitHub"
msgstr ""

#: ../../source/development/contributing.rst:100
msgid ""
"To the new user, working with Git is one of the more daunting aspects of "
"contributing to Xorbits. It can very quickly become overwhelming, but "
"sticking to the guidelines below will help keep the process "
"straightforward and mostly trouble free.  As always, if you are having "
"difficulties please feel free to ask for help."
msgstr ""

#: ../../source/development/contributing.rst:105
msgid ""
"The code is hosted on `GitHub <https://www.github.com/xprobe-"
"inc/xorbits>`_. To contribute you will need to sign up for a `free GitHub"
" account <https://github.com/signup/free>`_. We use `Git <https://git-"
"scm.com/>`_ for version control to allow many people to work together on "
"the project."
msgstr ""

#: ../../source/development/contributing.rst:110
msgid "Some great resources for learning Git:"
msgstr ""

#: ../../source/development/contributing.rst:112
msgid "the `GitHub help pages <https://help.github.com/>`_."
msgstr ""

#: ../../source/development/contributing.rst:113
msgid "the `NumPy documentation <https://numpy.org/doc/stable/dev/index.html>`_."
msgstr ""

#: ../../source/development/contributing.rst:114
msgid "Matthew Brett's `Pydagogue <https://matthew-brett.github.io/pydagogue/>`_."
msgstr ""

#: ../../source/development/contributing.rst:117
msgid "Getting started with Git"
msgstr ""

#: ../../source/development/contributing.rst:119
msgid ""
"`GitHub has instructions <https://help.github.com/set-up-git-redirect>`__"
" for installing git, setting up your SSH key, and configuring git. All "
"these steps need to be completed before you can work seamlessly between "
"your local repository and GitHub."
msgstr ""

#: ../../source/development/contributing.rst:126
msgid "Forking"
msgstr ""

#: ../../source/development/contributing.rst:128
msgid ""
"You will need your own fork to work on the code. Go to the `Xorbits "
"project page <https://github.com/xprobe-inc/xorbits>`_ and hit the "
"``Fork`` button. You will want to clone your fork to your machine::"
msgstr ""

#: ../../source/development/contributing.rst:136
msgid ""
"This creates the directory ``xorbits-yourname`` and connects your "
"repository to the upstream (main project) *Xorbits* repository."
msgstr ""

#: ../../source/development/contributing.rst:139
msgid ""
"Note that performing a shallow clone (with ``--depth==N``, for some ``N``"
" greater or equal to 1) might break some tests."
msgstr ""

#: ../../source/development/contributing.rst:143
msgid "Creating a branch"
msgstr ""

#: ../../source/development/contributing.rst:145
msgid ""
"You want your main branch to reflect only production-ready code, so "
"create a feature branch for making your changes. For example::"
msgstr ""

#: ../../source/development/contributing.rst:151
msgid "The above can be simplified to::"
msgstr ""

#: ../../source/development/contributing.rst:155
msgid ""
"This changes your working directory to the shiny-new-feature branch. Keep"
" any changes in this branch specific to one bug or feature so it is clear"
" what the branch brings to Xorbits. You can have many shiny-new-features "
"and switch in between them using the git checkout command."
msgstr ""

#: ../../source/development/contributing.rst:160
msgid ""
"When creating this branch, make sure your main branch is up to date with "
"the latest upstream main version. To update your local main branch, you "
"can do::"
msgstr ""

#: ../../source/development/contributing.rst:167
msgid ""
"When you want to update the feature branch with changes in main after you"
" created the branch, check the section on :ref:`updating a PR "
"<contributing.update-pr>`."
msgstr ""

#: ../../source/development/contributing.rst:172
msgid "Contributing your changes to Xorbits"
msgstr ""

#: ../../source/development/contributing.rst:177
msgid "Committing your code"
msgstr ""

#: ../../source/development/contributing.rst:179
msgid ""
"Keep style fixes to a separate commit to make your pull request more "
"readable."
msgstr ""

#: ../../source/development/contributing.rst:181
msgid "Once you've made changes, you can see them by typing::"
msgstr ""

#: ../../source/development/contributing.rst:185
msgid ""
"If you have created a new file, it is not being tracked by git. Add it by"
" typing::"
msgstr ""

#: ../../source/development/contributing.rst:189
msgid "Doing 'git status' again should give something like::"
msgstr ""

#: ../../source/development/contributing.rst:196
msgid ""
"Finally, commit your changes to your local repository with an explanatory"
" message. Xorbits uses a convention for commit message prefixes and "
"layout.  Here are some common prefixes along with general guidelines for "
"when to use them:"
msgstr ""

#: ../../source/development/contributing.rst:200
msgid "FEATURE: Feature, new functionality"
msgstr ""

#: ../../source/development/contributing.rst:201
msgid "ENH: Enhancement"
msgstr ""

#: ../../source/development/contributing.rst:202
msgid "BUG: Bug fix"
msgstr ""

#: ../../source/development/contributing.rst:203
msgid "DOC: Additions/updates to documentation"
msgstr ""

#: ../../source/development/contributing.rst:204
msgid "TST: Additions/updates to tests"
msgstr ""

#: ../../source/development/contributing.rst:205
msgid "BLD: Updates to the build process/scripts"
msgstr ""

#: ../../source/development/contributing.rst:206
msgid "PERF: Performance improvement"
msgstr ""

#: ../../source/development/contributing.rst:207
msgid "TYP: Type annotations"
msgstr ""

#: ../../source/development/contributing.rst:208
msgid "CLN: Code cleanup"
msgstr ""

#: ../../source/development/contributing.rst:209
msgid "REF: Refactor"
msgstr ""

#: ../../source/development/contributing.rst:210
msgid "CHORE: chore"
msgstr ""

#: ../../source/development/contributing.rst:212
msgid ""
"The following defines how a commit message should be structured.  Please "
"reference the relevant GitHub issues in your commit message using GH1234 "
"or #1234.  Either style is fine, but the former is generally preferred:"
msgstr ""

#: ../../source/development/contributing.rst:216
msgid "a subject line with ``< 80`` chars."
msgstr ""

#: ../../source/development/contributing.rst:217
msgid "One blank line."
msgstr ""

#: ../../source/development/contributing.rst:218
msgid "Optionally, a commit message body."
msgstr ""

#: ../../source/development/contributing.rst:220
msgid "Now you can commit your changes in your local repository::"
msgstr ""

#: ../../source/development/contributing.rst:227
msgid "Pushing your changes"
msgstr ""

#: ../../source/development/contributing.rst:229
msgid ""
"When you want your changes to appear publicly on your GitHub page, push "
"your forked feature branch's commits::"
msgstr ""

#: ../../source/development/contributing.rst:234
msgid ""
"Here ``origin`` is the default name given to your remote repository on "
"GitHub. You can see the remote repositories::"
msgstr ""

#: ../../source/development/contributing.rst:239
msgid ""
"If you added the upstream repository as described above you will see "
"something like::"
msgstr ""

#: ../../source/development/contributing.rst:247
msgid ""
"Now your code is on GitHub, but it is not yet a part of the Xorbits "
"project. For that to happen, a pull request needs to be submitted on "
"GitHub."
msgstr ""

#: ../../source/development/contributing.rst:251
msgid "Review your code"
msgstr ""

#: ../../source/development/contributing.rst:253
msgid ""
"When you're ready to ask for a code review, file a pull request. Before "
"you do, once again make sure that you have followed all the guidelines "
"outlined in this document regarding code style, tests, performance tests,"
" and documentation. You should also double check your branch changes "
"against the branch it was based on:"
msgstr ""

#: ../../source/development/contributing.rst:258
msgid ""
"Navigate to your repository on GitHub -- https://github.com/your-user-"
"name/xorbits"
msgstr ""

#: ../../source/development/contributing.rst:259
msgid "Click on ``Branches``"
msgstr ""

#: ../../source/development/contributing.rst:260
msgid "Click on the ``Compare`` button for your feature branch"
msgstr ""

#: ../../source/development/contributing.rst:261
msgid ""
"Select the ``base`` and ``compare`` branches, if necessary. This will be "
"``main`` and ``shiny-new-feature``, respectively."
msgstr ""

#: ../../source/development/contributing.rst:265
msgid "Finally, make the pull request"
msgstr ""

#: ../../source/development/contributing.rst:267
msgid ""
"If everything looks good, you are ready to make a pull request.  A pull "
"request is how code from a local repository becomes available to the "
"GitHub community and can be looked at and eventually merged into the main"
" version.  This pull request and its associated changes will eventually "
"be committed to the main branch and available in the next release.  To "
"submit a pull request:"
msgstr ""

#: ../../source/development/contributing.rst:273
msgid "Navigate to your repository on GitHub"
msgstr ""

#: ../../source/development/contributing.rst:274
msgid "Click on the ``Pull Request`` button"
msgstr ""

#: ../../source/development/contributing.rst:275
msgid ""
"You can then click on ``Commits`` and ``Files Changed`` to make sure "
"everything looks okay one last time"
msgstr ""

#: ../../source/development/contributing.rst:277
msgid "Write a description of your changes in the ``Preview Discussion`` tab"
msgstr ""

#: ../../source/development/contributing.rst:278
msgid "Click ``Send Pull Request``."
msgstr ""

#: ../../source/development/contributing.rst:280
msgid ""
"This request then goes to the repository maintainers, and they will "
"review the code."
msgstr ""

#: ../../source/development/contributing.rst:286
msgid "Updating your pull request"
msgstr ""

#: ../../source/development/contributing.rst:288
msgid ""
"Based on the review you get on your pull request, you will probably need "
"to make some changes to the code. In that case, you can make them in your"
" branch, add a new commit to that branch, push it to GitHub, and the pull"
" request will be automatically updated.  Pushing them to GitHub again is "
"done by::"
msgstr ""

#: ../../source/development/contributing.rst:295
msgid ""
"This will automatically update your pull request with the latest code and"
" restart the :any:`Continuous Integration <contributing.ci>` tests."
msgstr ""

#: ../../source/development/contributing.rst:298
msgid ""
"Another reason you might need to update your pull request is to solve "
"conflicts with changes that have been merged into the main branch since "
"you opened your pull request."
msgstr ""

#: ../../source/development/contributing.rst:302
msgid "To do this, you need to \"merge upstream main\" in your branch::"
msgstr ""

#: ../../source/development/contributing.rst:308
msgid ""
"If there are no conflicts (or they could be fixed automatically), a file "
"with a default commit message will open, and you can simply save and quit"
" this file."
msgstr ""

#: ../../source/development/contributing.rst:311
msgid ""
"If there are merge conflicts, you need to solve those conflicts. See for "
"example at https://help.github.com/articles/resolving-a-merge-conflict-"
"using-the-command-line/ for an explanation on how to do this. Once the "
"conflicts are merged and the files where the conflicts were solved are "
"added, you can run ``git commit`` to save those fixes."
msgstr ""

#: ../../source/development/contributing.rst:317
msgid ""
"If you have uncommitted changes at the moment you want to update the "
"branch with main, you will need to ``stash`` them prior to updating (see "
"the `stash docs <https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-"
"Cleaning>`__). This will effectively store your changes and they can be "
"reapplied after updating."
msgstr ""

#: ../../source/development/contributing.rst:322
msgid ""
"After the feature branch has been update locally, you can now update your"
" pull request by pushing to the branch on GitHub::"
msgstr ""

#: ../../source/development/contributing.rst:328
msgid "Autofixing formatting errors"
msgstr ""

#: ../../source/development/contributing.rst:330
msgid ""
"We use several styling checks (e.g. ``black``, ``flake8``, ``isort``) "
"which are run after you make a pull request."
msgstr ""

#: ../../source/development/contributing.rst:333
msgid ""
"To automatically fix formatting errors on each commit you make, you can "
"set up pre-commit yourself. First, create a Python :ref:`environment "
"<contributing_environment>` and then set up :ref:`pre-commit "
"<contributing.pre-commit>`."
msgstr ""

#: ../../source/development/contributing.rst:338
msgid "Delete your merged branch (optional)"
msgstr ""

#: ../../source/development/contributing.rst:340
msgid ""
"Once your feature branch is accepted into upstream, you'll probably want "
"to get rid of the branch. First, merge upstream main into your branch so "
"git knows it is safe to delete your branch::"
msgstr ""

#: ../../source/development/contributing.rst:348
msgid "Then you can do::"
msgstr ""

#: ../../source/development/contributing.rst:352
msgid ""
"Make sure you use a lower-case ``-d``, or else git won't warn you if your"
" feature branch has not actually been merged."
msgstr ""

#: ../../source/development/contributing.rst:355
msgid "The branch will still exist on GitHub, so to delete it there do::"
msgstr ""

#: ../../source/development/contributing.rst:361
msgid "Tips for a successful pull request"
msgstr ""

#: ../../source/development/contributing.rst:363
msgid ""
"If you have made it to the `Review your code`_ phase, one of the core "
"contributors may take a look. Please note however that a handful of "
"people are responsible for reviewing all of the contributions, which can "
"often lead to bottlenecks."
msgstr ""

#: ../../source/development/contributing.rst:367
msgid "To improve the chances of your pull request being reviewed, you should:"
msgstr ""

#: ../../source/development/contributing.rst:369
msgid ""
"**Reference an open issue** for non-trivial changes to clarify the PR's "
"purpose"
msgstr ""

#: ../../source/development/contributing.rst:370
msgid ""
"**Ensure you have appropriate tests**. These should be the first part of "
"any PR"
msgstr ""

#: ../../source/development/contributing.rst:371
msgid ""
"**Keep your pull requests as simple as possible**. Larger PRs take longer"
" to review"
msgstr ""

#: ../../source/development/contributing.rst:372
msgid ""
"**Ensure that CI is in a green state**. Reviewers may not even look "
"otherwise"
msgstr ""

#: ../../source/development/contributing.rst:373
msgid ""
"**Keep** `Updating your pull request`_, either by request or every few "
"days"
msgstr ""

