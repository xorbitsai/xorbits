# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2023, Xprobe Inc.
# This file is distributed under the same license as the Xorbits package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Xorbits \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-22 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/reference/numpy/logic.rst:2
msgid "Logic functions"
msgstr ""

#: ../../source/reference/numpy/logic.rst:7
msgid "Truth value testing"
msgstr ""

#: ../../source/reference/numpy/logic.rst:13:<autosummary>:1
msgid ""
":py:obj:`all <xorbits.numpy.all>`\\ \\(a\\[\\, axis\\, out\\, keepdims\\,"
" combine\\_size\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:13:<autosummary>:1
msgid "Test whether all array elements along a given axis evaluate to True."
msgstr ""

#: ../../source/reference/numpy/logic.rst:13:<autosummary>:1
msgid ""
":py:obj:`any <xorbits.numpy.any>`\\ \\(a\\[\\, axis\\, out\\, keepdims\\,"
" combine\\_size\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:13:<autosummary>:1
msgid "Test whether any array element along a given axis evaluates to True."
msgstr ""

#: ../../source/reference/numpy/logic.rst:15
msgid "Array contents"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ""
":py:obj:`isfinite <xorbits.numpy.isfinite>`\\ \\(x\\, \\/\\[\\, out\\, "
"where\\, casting\\, order\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid "Test element-wise for finiteness (not infinity and not Not a Number)."
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ""
":py:obj:`isinf <xorbits.numpy.isinf>`\\ \\(x\\, \\/\\[\\, out\\, where\\,"
" casting\\, order\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid "Test element-wise for positive or negative infinity."
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ""
":py:obj:`isnan <xorbits.numpy.isnan>`\\ \\(x\\, \\/\\[\\, out\\, where\\,"
" casting\\, order\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid "Test element-wise for NaN and return result as a boolean array."
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ":py:obj:`isnat <xorbits.numpy.isnat>`\\"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ""
"isnat(x, /, out=None, *, where=True, casting='same_kind', order='K', "
"dtype=None, subok=True[, signature, extobj])"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ":py:obj:`isneginf <xorbits.numpy.isneginf>`\\ \\(x\\[\\, out\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid "Test element-wise for negative infinity, return result as bool array."
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid ":py:obj:`isposinf <xorbits.numpy.isposinf>`\\ \\(x\\[\\, out\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:25:<autosummary>:1
msgid "Test element-wise for positive infinity, return result as bool array."
msgstr ""

#: ../../source/reference/numpy/logic.rst:27
msgid "Array type testing"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid ":py:obj:`iscomplex <xorbits.numpy.iscomplex>`\\ \\(x\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid "Returns a bool array, where True if input element is complex."
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid ":py:obj:`iscomplexobj <xorbits.numpy.iscomplexobj>`\\ \\(x\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid "Check for a complex type or an array of complex numbers."
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid ":py:obj:`isfortran <xorbits.numpy.isfortran>`\\ \\(a\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid "Check if the array is Fortran contiguous but *not* C contiguous."
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid ":py:obj:`isreal <xorbits.numpy.isreal>`\\ \\(x\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid "Returns a bool array, where True if input element is real."
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid ":py:obj:`isrealobj <xorbits.numpy.isrealobj>`\\ \\(x\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid "Return True if x is a not complex type or an array of complex numbers."
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid ":py:obj:`isscalar <xorbits.numpy.isscalar>`\\ \\(element\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:37:<autosummary>:1
msgid "Returns True if the type of `element` is a scalar type."
msgstr ""

#: ../../source/reference/numpy/logic.rst:39
msgid "Logical operations"
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid ""
":py:obj:`logical_and <xorbits.numpy.logical_and>`\\ \\(x1\\, x2\\, "
"\\/\\[\\, out\\, where\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid "Compute the truth value of x1 AND x2 element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid ""
":py:obj:`logical_or <xorbits.numpy.logical_or>`\\ \\(x1\\, x2\\, "
"\\/\\[\\, out\\, where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid "Compute the truth value of x1 OR x2 element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid ""
":py:obj:`logical_not <xorbits.numpy.logical_not>`\\ \\(x\\, \\/\\[\\, "
"out\\, where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid "Compute the truth value of NOT x element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid ""
":py:obj:`logical_xor <xorbits.numpy.logical_xor>`\\ \\(x1\\, x2\\, "
"\\/\\[\\, out\\, where\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:47:<autosummary>:1
msgid "Compute the truth value of x1 XOR x2, element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:49
msgid "Comparison"
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid ""
":py:obj:`allclose <xorbits.numpy.allclose>`\\ \\(a\\, b\\[\\, rtol\\, "
"atol\\, equal\\_nan\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid "Returns True if two arrays are element-wise equal within a tolerance."
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid ""
":py:obj:`isclose <xorbits.numpy.isclose>`\\ \\(a\\, b\\[\\, rtol\\, "
"atol\\, equal\\_nan\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid ""
"Returns a boolean array where two arrays are element-wise equal within a "
"tolerance."
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid ":py:obj:`array_equal <xorbits.numpy.array_equal>`\\ \\(a1\\, a2\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid "True if two arrays have the same shape and elements, False otherwise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid ":py:obj:`array_equiv <xorbits.numpy.array_equiv>`\\ \\(a1\\, a2\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:57:<autosummary>:1
msgid "Returns True if input arrays are shape consistent and all elements equal."
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid ""
":py:obj:`greater <xorbits.numpy.greater>`\\ \\(x1\\, x2\\, \\/\\[\\, "
"out\\, where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid "Return the truth value of (x1 > x2) element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid ""
":py:obj:`greater_equal <xorbits.numpy.greater_equal>`\\ \\(x1\\, x2\\, "
"\\/\\[\\, out\\, where\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid "Return the truth value of (x1 >= x2) element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid ""
":py:obj:`less <xorbits.numpy.less>`\\ \\(x1\\, x2\\, \\/\\[\\, out\\, "
"where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid "Return the truth value of (x1 < x2) element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid ""
":py:obj:`less_equal <xorbits.numpy.less_equal>`\\ \\(x1\\, x2\\, "
"\\/\\[\\, out\\, where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid "Return the truth value of (x1 <= x2) element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid ""
":py:obj:`equal <xorbits.numpy.equal>`\\ \\(x1\\, x2\\, \\/\\[\\, out\\, "
"where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid "Return (x1 == x2) element-wise."
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid ""
":py:obj:`not_equal <xorbits.numpy.not_equal>`\\ \\(x1\\, x2\\, \\/\\[\\, "
"out\\, where\\, casting\\, ...\\]\\)"
msgstr ""

#: ../../source/reference/numpy/logic.rst:66:<autosummary>:1
msgid "Return (x1 != x2) element-wise."
msgstr ""

