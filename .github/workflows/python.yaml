name: Python CI

on:
  push:
    branches:
      - '*'
  pull_request:
    types: ['opened', 'reopened', 'synchronize']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.10" ]

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          path: "python/xorbits"
          args: "--config python/setup.cfg"
      - name: black
        uses: psf/black@stable
        with:
          src: "python/xorbits"
          options: "--check --verbose --exclude xorbits/_mars/"
      - uses: isort/isort-action@master
        with:
          sortPaths: "python/xorbits"
          configuration: "--check-only --profile black --diff --skip python/xorbits/_mars/"
      - name: mypy
        run: pip install mypy && cd python && mypy xorbits
      - name: codespell
        run: pip install codespell && cd python && codespell xorbits
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      # ESLint and Prettier must be in `package.json`
      - name: Install Node.js dependencies
        run: cd python/xorbits/web/ui && npm ci
      - name: ESLint Check
        run: cd python/xorbits/web/ui && npx eslint .
      - name: Prettier Check
        run: cd python/xorbits/web/ui && ./node_modules/.bin/prettier --check .

  build_test_job:
    runs-on: ${{ matrix.os }}
    needs: lint
    env:
      CONDA_ENV: xorbits-test
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        module: ["xorbits", "kubernetes"]
        exclude:
          - { os: macos-latest, python-version: 3.8}
          - { os: macos-latest, python-version: 3.9}
          - { os: windows-latest, python-version: 3.8}
          - { os: windows-latest, python-version: 3.9}
          - { os: windows-latest, module: kubernetes}
          - { os: macos-latest, module: kubernetes}
        include:
          - { os: ubuntu-latest, module: _mars/dataframe, python-version: 3.9 }
          - { os: ubuntu-latest, module: _mars/tensor, python-version: 3.9 }
          - { os: ubuntu-latest, module: _mars/learn, python-version: 3.9 }
          - { os: ubuntu-latest, module: _mars/core, python-version: 3.9 }


    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set up conda ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}
        activate-environment: ${{ env.CONDA_ENV }}

    - name: Start minikube
      uses: medyagh/setup-minikube@master
      if: ${{ matrix.module == 'kubernetes' }}
      with:
        driver: none
        kubernetes-version: v1.23.12

    - name: Install dependencies
      env:
        MODULE: ${{ matrix.module }}
      run: |
        pip install numpy scipy cython
        
        if [[ "$PYTHON" == "3.9" ]]; then
          conda install numba
        fi
        if [[ "$MODULE" == "xorbits" ]]; then
          pip install openpyxl
        fi
        if [[ "$MODULE" == "_mars/dataframe" ]]; then
          pip install sqlalchemy\<2
        fi
        if [[ "$PYTHON" == "3.9" ]]; then
          pip install h5py zarr matplotlib fastparquet
          conda install -n test --quiet --yes -c conda-forge python=$PYTHON \
            "tiledb-py>=0.4.3,<0.6.0" "tiledb<2.0.0" || true
        fi
        if [[ "$MODULE" == "_mars/dataframe" ]]; then
          pip install xgboost lightgbm keras tensorflow faiss-cpu\<1.7.3 torch torchvision \
            statsmodels tsfresh
        fi
        pip install -e ".[dev,extra]"
      working-directory: ./python

    - name: Test with pytest
      env:
        MODULE: ${{ matrix.module }}
      run: |
        if [[ "$MODULE" == "xorbits" ]]; then
          pytest --ignore xorbits/_mars/ --log-level=INFO --timeout=1500 \
            -W ignore::PendingDeprecationWarning \
            --cov-config=setup.cfg --cov-report=xml --cov=xorbits xorbits
        elif [[ "$MODULE" == "mars-core" ]]; then
          pytest --ignore xorbits/_mars/dataframe --ignore xorbits/_mars/tensor \
            --ignore xorbits/_mars/learn --ignore xorbits/_mars/remote \
            --log-level=INFO --timeout=1500 \
            -W ignore::PendingDeprecationWarning \
            --cov-config=setup.cfg --cov-report=xml --cov=xorbits xorbits/_mars
        elif [[ "$MODULE" == "kubernetes" ]]; then
          pytest -s --ignore xorbits/_mars/ --timeout=1500 \
            -W ignore::PendingDeprecationWarning \
            --cov-config=setup.cfg --cov-report=xml --cov=xorbits/deploy --cov=xorbits xorbits/deploy/kubernetes
        else
          pytest -s --timeout=1500 --log-level=INFO \
            -W ignore::PendingDeprecationWarning \
            --cov-config=setup.cfg --cov-report=xml --cov=xorbits/deploy --cov=xorbits xorbits/$MODULE
        fi
      working-directory: ./python

    - name: Report coverage data
      uses: codecov/codecov-action@v3
      with:
        working-directory: ./python
        flags: unittests
